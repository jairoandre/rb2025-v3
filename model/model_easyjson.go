// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC80ae7adDecodeRinhaModel(in *jlexer.Lexer, out *SummaryResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "default":
			(out.Default).UnmarshalEasyJSON(in)
		case "fallback":
			(out.Fallback).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeRinhaModel(out *jwriter.Writer, in SummaryResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"default\":"
		out.RawString(prefix[1:])
		(in.Default).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"fallback\":"
		out.RawString(prefix)
		(in.Fallback).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SummaryResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeRinhaModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SummaryResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeRinhaModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SummaryResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeRinhaModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SummaryResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeRinhaModel(l, v)
}
func easyjsonC80ae7adDecodeRinhaModel1(in *jlexer.Lexer, out *Summary) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "totalRequests":
			out.TotalRequests = int(in.Int())
		case "totalAmount":
			out.TotalAmount = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeRinhaModel1(out *jwriter.Writer, in Summary) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"totalRequests\":"
		out.RawString(prefix[1:])
		out.Int(int(in.TotalRequests))
	}
	{
		const prefix string = ",\"totalAmount\":"
		out.RawString(prefix)
		out.Float64(float64(in.TotalAmount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Summary) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeRinhaModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Summary) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeRinhaModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Summary) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeRinhaModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Summary) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeRinhaModel1(l, v)
}
func easyjsonC80ae7adDecodeRinhaModel2(in *jlexer.Lexer, out *ServiceHealthResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "defaultHeath":
			out.DefaultHealth = bool(in.Bool())
		case "fallbackHealth":
			out.FallbackHealth = bool(in.Bool())
		case "defaultMinResponse":
			out.DefaultMinResponse = int(in.Int())
		case "fallbackMinResponse":
			out.FallbackMinResponse = int(in.Int())
		case "nextCheck":
			out.NextCheck = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeRinhaModel2(out *jwriter.Writer, in ServiceHealthResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"defaultHeath\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.DefaultHealth))
	}
	{
		const prefix string = ",\"fallbackHealth\":"
		out.RawString(prefix)
		out.Bool(bool(in.FallbackHealth))
	}
	{
		const prefix string = ",\"defaultMinResponse\":"
		out.RawString(prefix)
		out.Int(int(in.DefaultMinResponse))
	}
	{
		const prefix string = ",\"fallbackMinResponse\":"
		out.RawString(prefix)
		out.Int(int(in.FallbackMinResponse))
	}
	{
		const prefix string = ",\"nextCheck\":"
		out.RawString(prefix)
		out.Int(int(in.NextCheck))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ServiceHealthResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeRinhaModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ServiceHealthResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeRinhaModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ServiceHealthResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeRinhaModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ServiceHealthResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeRinhaModel2(l, v)
}
func easyjsonC80ae7adDecodeRinhaModel3(in *jlexer.Lexer, out *ProcessorHealthResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "failing":
			out.Failing = bool(in.Bool())
		case "minResponseTime":
			out.MinResponseTime = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeRinhaModel3(out *jwriter.Writer, in ProcessorHealthResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"failing\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Failing))
	}
	{
		const prefix string = ",\"minResponseTime\":"
		out.RawString(prefix)
		out.Int(int(in.MinResponseTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProcessorHealthResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeRinhaModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProcessorHealthResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeRinhaModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProcessorHealthResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeRinhaModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProcessorHealthResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeRinhaModel3(l, v)
}
func easyjsonC80ae7adDecodeRinhaModel4(in *jlexer.Lexer, out *PaymentRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "correlationId":
			out.CorrelationID = string(in.String())
		case "amount":
			out.Amount = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeRinhaModel4(out *jwriter.Writer, in PaymentRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"correlationId\":"
		out.RawString(prefix[1:])
		out.String(string(in.CorrelationID))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Float64(float64(in.Amount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PaymentRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeRinhaModel4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PaymentRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeRinhaModel4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PaymentRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeRinhaModel4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PaymentRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeRinhaModel4(l, v)
}
func easyjsonC80ae7adDecodeRinhaModel5(in *jlexer.Lexer, out *PaymentEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "correlationId":
			out.CorrelationID = string(in.String())
		case "amount":
			out.Amount = float64(in.Float64())
		case "requestedAt":
			out.RequestedAt = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeRinhaModel5(out *jwriter.Writer, in PaymentEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"correlationId\":"
		out.RawString(prefix[1:])
		out.String(string(in.CorrelationID))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Float64(float64(in.Amount))
	}
	{
		const prefix string = ",\"requestedAt\":"
		out.RawString(prefix)
		out.String(string(in.RequestedAt))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PaymentEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeRinhaModel5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PaymentEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeRinhaModel5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PaymentEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeRinhaModel5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PaymentEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeRinhaModel5(l, v)
}
func easyjsonC80ae7adDecodeRinhaModel6(in *jlexer.Lexer, out *Payment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "correlationId":
			out.CorrelationID = string(in.String())
		case "amount":
			out.Amount = int(in.Int())
		case "requestedAt":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.RequestedAt).UnmarshalJSON(data))
			}
		case "processor":
			out.Processor = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeRinhaModel6(out *jwriter.Writer, in Payment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"correlationId\":"
		out.RawString(prefix[1:])
		out.String(string(in.CorrelationID))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Int(int(in.Amount))
	}
	{
		const prefix string = ",\"requestedAt\":"
		out.RawString(prefix)
		out.Raw((in.RequestedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"processor\":"
		out.RawString(prefix)
		out.Int(int(in.Processor))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Payment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeRinhaModel6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Payment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeRinhaModel6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Payment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeRinhaModel6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Payment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeRinhaModel6(l, v)
}
